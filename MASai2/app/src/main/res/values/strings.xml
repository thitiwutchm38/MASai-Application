<resources>
    <string name="app_name">MASai2</string>


    <string name="descrip">Test</string>

    <string name="hello">Test</string>
    <string name="title_activity_security_tips">security_tips</string>
    <string name="tab_text_1">Tab 1</string>
    <string name="tab_text_2">Tab 2</string>
    <string name="tab_text_3">Tab 3</string>
    <string name="action_settings">Settings</string>
    <string name="section_format">Hello World from section: %1$d</string>
    <string name="title_activity_iot_suggestion">iot_suggestion</string>


    <string name="M1">M1 covers a platform feature misuse or failure to manage platform security controls usage. The platform in the context is related to the mobile operating system such as Android and iOS. Generally, each platform provides developers the application-developing guidelines, but they usually fail to follow it. Therefore, the violation can raise risks to users unintentionally or intentionally. Moreover, misuse of API calls is also considered to be this category. One example of this vulnerability is that the application requests a user several permissions, and some of the permissions are not related to the application usage. To prevent such this vulnerability, developers must follow the mobile application developing guidelines according to each platform properly.</string>

    <string name="M2">M2 covers insecure data storage and unintended data leakage. The vulnerabilities occur when data storages, such as SQLite database, log file, XML data store, cookies, cache, etc., are not well protected nor well implemented. It is caused by the carelessness of developers who usually think that users or attackers are unable to access the filesystem on their mobile devices. In fact, filesystems are easily accessible by several free software tools nowadays. A scenario which demonstrates the possibility of an attack is when a mobile device is lost or stolen, so an attacker can access to personally identifiable information (PII) or other sensitive information. Preventing these vulnerabilities can be implemented by understanding each type of data storage usage. It is also crucial to handle URL caching, keyboard press caching, copy/paste buffer caching, etc.</string>

    <string name="M3">M3 covers several surfaces of attacks which occur in communication or network layer of mobile applications. Because of resource-constraint in a mobile device, mobile applications are usually designed to have a data exchange in a client-server scheme feature. Therefore, an attacker can intercept, or sniff data transferred in the network. Furthermore, mobile applications normally do not protect network traffic, nor consistently implement SSL/TLS which is a transport layer security during authentication. The inconsistency can raise a vulnerability of data exposing. Therefore, the best practice to secure communication is to always consider that the network is not secure, apply strong and industry standard cipher suites, implement SSL/TLS to transport channels, and avoid sending sensitive data over communication channels, e.g. SMS and notifications.</string>

    <string name="M4">M4 covers vulnerabilities occurring at the end-user authentication processes and bad session management in a backend server. As authentication requirements for mobile applications are different from traditional web authentication scheme, i.e. the mobile applications do not require to be online every time during the session, an adversary can bypass authentication to the mobile application backend server if weak or missing authentication schemes are implemented. The result of the vulnerabilities can lead to severe impacts such as access control promotion, inability to identify the source of an attack, PII leakage, etc. To prevent these impacts, mobile applications must avoid weak patterns at the client-side, such as persistent authentication functionality, and developers should re-enforce authorisation and authentication controls on the server-side.</string>

    <string name="M5">M5 covers cryptography schemes, which are insufficient in some usage, applying to sensitive information asset. The category does not consider SSL or TLS nor the failure of using cryptography to data storage at all when it could. The vulnerabilities in this category can be a usage of insecure and/or deprecated encryption algorithms such as MD5 and SHA1, poor key management processes, and creation of custom encryption protocols. The best practice to prevent insufficient cryptography is welly handling sensitive data. For instances, any sensitive data should not be stored on a mobile when possible, and developers should follow the National Institute of Standards and Technology (NIST) encryption guidelines.</string>

    <string name="M6">This category captures the failure in authorisation e.g. authorisation decisions in the client side, forced browsing, etc. It is different from M4 - Insecure Authentication issues where an adversary login to the application legitimately, but they can bypass the authorisation processes to execute privileged functionalities. The vulnerabilities can occur when there is a presence of insecure direct object reference vulnerabilities (IDOR) in code, or when a mobile application includes the user’s roles or permissions in a request part to a backend system. The impact of weak authorisation is similar to M4 - Insecure Authentication. To avoid insecure authorisation checks, the authorisation process should verify the user’s permissions using only information in backend systems.</string>

    <string name="M7">M7 refers to code-level implementation problems in the client-side  of mobile applications. In this category, it captures some vulnerabilities such as buffer overflows, format string vulnerabilities which could occur from unintentional mistakes. Therefore, the exploitability level is difficult since most modern computer languages provide the ability to protect memory leakage like in Java. Moreover, maintaining consistency in coding can prevent such a risk caused by this type of attack. There are also several third-party static analysis tools which are able to identify buffer overflows and memory leaks, but one should ensure that the tools are safe.</string>

    <string name="M8">Code Tampering This category covers various techniques of code tampering such as binary patching, local resource modification, dynamic memory modification, etc. Typically, victims from this type of attacks are attacked by phishing attacks to download the malicious application stored on third-party app stores. This type of attack can lead to identity theft or fraud. </string>

    <string name="M9">M9 refers to the technique which decompiles an application to the original-like source code and analyses vulnerabilities in the source code. Reverse engineering can also cause code tampering attacks or other attacks as all mobile code is susceptible to reverse engineering due to the inherent nature of the code. Attackers are required skills to perform an analysis of the final core binary to extract useful information embedded within the targeted mobile application. A program written in languages which allow for dynamic introspection at runtime such as Java and Objective C are more susceptible to reverse engineering. An obfuscation tool can be used to prevent reverse engineering. </string>

    <string name="M10">M10 refers to hidden backdoor functionality in a mobile application which is attached unintentionally into a production environment by developers. The developers may install the extraneous functions for fixing issues in backdoor feature which can raise the risk of attacks. For example, a developer might declare a variable containing a password for testing, but he/she forgets to exclude it when officially upload the application to the production build. Attackers can exploit extraneous functionality directly from their own systems via reverse engineering. The impact of the risk is severe since it can give the attack the ability to execute unauthorised high-privileged actions. The best practice to prevent such these vulnerabilities is to carefully review and verify code.</string>




    <string name="I1">Insecure web interface is a vulnerability that is easy to exploit. It can cause from having weak credentials, lack of account lockout or account enumeration. An attacker could be both external or internal users that access the web interface. Furthermore, the impact of insecure web interface can be severe, since it can result in data corruption or loss, losing control of the device and lack of accountability.</string>
    <string name="I2">Insufficient authentication occurs when passwords are weak or easy to guess, insufficient protection over authentication or no Two-factor authentication system. An attacker could be both external or internal users that access the web interface, mobile interface or cloud interface. Furthermore, the impact of insufficient authentication/authorisation can be severe since it can result in data corruption or loss, complete compromise of the device and user account, denial of access and lack of accountability</string>
    <string name="I3">Insecure network services will be weak against buffer overflow attack or attack such as Denial of Service attack that makes the user unable to access the device. Nmap, Arping, Port Scanner, etc. are automated testing tools that can use to detect the problem. An attacker could be both external and internal users that access the device by a network connection. The result of these attacks can be data corruption or loss, unable to access or perform the target device and other related devices.</string>
    <string name="I4">Lack of transport encryption and Integrity verification allows transmitted data over the network to be sniffed or viewed by an attacker (mostly with a man in the middle attack) and extract data in the packet to view information inside the packet. Networks that are easy to discover and transmit poorly encryption packet could become a target for attackers. An attacker could be both external and internal users that access to the device’s network. Moreover, the impact can be severe, since it is depending on extracted data inside the packet and it can lead to exposure of information from the compromise of user accounts or devices.</string>
    <string name="I5">Collection of personal data and sensitive data with improper protection can be a great problem to the victim when the data is exposed. An attacker could be both external and internal users that access to the device, the device’s network, the cloud connection, and the mobile application. An attacker exploits the system using multiple vulnerabilities available such as insufficient authentication, insecure network services or lack of transport encryption to view personal data inside the packet. Impact of this problem is severe since the mistake can lead to exposure of sensitive information such as personal data, health information, financial information and could lead to identity theft or compromise of user accounts.</string>
    <string name="I6">This attack occurs when credentials are used from many methods such as guessing password, account enumeration or sniffing account information. An attacker could be anyone who accessesto the internet. The attacker also exploitsthe system using multiple vulnerabilities available such as insufficient authentication, account enumeration to access data, lack of transport encryption or control by using a cloud website. The impact can be severe that lead to data corruption, data loss or compromise over user data and device.</string>
    <string name="I7">Insecure mobile interface occurs when poorly secured credentials are used or using account enumeration to get access. The attack could be anyone who accesses to the mobile application. The attacker also exploits the system using multiple vulnerabilities available such as insufficient authentication, account enumeration to access data or lack of transport encryption to access or control data with the mobile interface. The impact can be severe that lead to data corruption, data loss or compromise over user data and device</string>
    <string name="I8">Insufficient security configurability occurs when the device has poorly configured security or no configured security due to the ability of the user to strengthening the security. An attacker could be anyone who accesses the device. The attacker can exploit the system using the lack of granular permission that controls accessibility to access data and device controller, lack of password options or encryption to compromise the device and data. Impact of this vulnerability is that it could lead to data loss and compromise of the device.</string>
    <string name="I9">Insecure software/firmware occurs when the devices are not updated when there are vulnerabilities in the system or when the network connection is not protected when the device is updating. An attacker could be anyone who has access to the device, network and access to update network server. Sometimes second-hand devices also installed with insecure software and firmware. The attacker can exploit the system by using multiple vulnerabilities such as using DNS hijacking to update malicious software, using an unencrypted connection to update files or getting originally unencrypted update file. The impact can be severe because it could affect, or attack others related device and lead to compromise of user data.</string>
    <string name="I10">Poor physical security occurs when the physical device is in attacker’s reach, an attacker can use an external port such as USB ports, SD cards or other data storage to access, configuring and tampering with the device or access the medium by disassembling the device. The attacker could be anyone who has physical access to the device. Impact of poor physical security can be severe because it could lead to a compromise over the device and device’s data storage.</string>








</resources>
